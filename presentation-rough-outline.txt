Welcome!
 -I am Peter Seale
 -I work for Improving in Houston
 -we're amazing

What YOU need to know about me:
 - I am a monster follow on twitter (@pseale)
 - I want you to speak up - arguments are ok - respect among equals - you can make this talk better

This is a talk about ARCHITECTURE
 - a "bottom-up" talk where I show specific examples and infer the higher principle
 	- remind me if I forget to explain the higher-level concept
 - As with all architecture, I carry with me ASSUMPTIONS, which I will gloss over quickly here, and which are borne out of my experience as a corporate software developer:
   - performance only matters at the network/file layers, not CPU/code
   - long-term developer velocity is the most important target
 - While discussing architecture, we are banning the following words:
 	- Bad
 	- Good
 	- Testable
 	- Maintainable
 	- Robust
 	- Extensible
 	- cohesion, lower coupling
 	- SOLID
 	- DRY
 	- "I can have you fired"
 - Instead, we must discuss costs/benefits via specific scenarios (whether user or developer)
Today we will take a journey together in an orderly descent into MADNESS making discrete changes to our codebase. For each act of this play, we are going to:
 - broadly describe what we are changing
 - show the code diffs
 - talk about benefits/costs with you
 - talk about 'an aside'

- ACT I: BLISSFUL IGNORANCE
 - Minimal code is written in order to satisfy the program requirements
 - Benefits:
   - Easy to trace execution (read from top-to-bottom)
 - Downsides:
   - Duplication, which leads to bugs
   - Classic spaghetti code

 - ACT II: STRUCTURAL PROGRAMMING
  - behavior is moved into methods to support better coupling and cohesion
  - Benefits:
    - Easier to reason about code that is grouped by function
      - This means easier troubleshooting
  - Downsides:
    - Harder to read code from top-to-bottom
  - Aside: even without objects, Wwe can separate what we want "delicious sausage" from how it is made "grind up a whole lot of horse ears"

 - Act III: OBJECT-ORIENTATION
   - behavior + state = objects
   - Benefits
     - objects allow encapsulation of behavior, giving you fewer things to think about
     - COMPOSABILITY - note to self: explain this very carefully & specifically
   - Downsides:
     - Harder to read code from top-to-bottom
     - You now have the extra mental weight of the objects themselves
   - Aside:
     - Possibly my last practical tip: listen to those who have done object-oriented programming for a long time (Kent Beck), and be wary of everyone else (including me)

  - ACTS TBD:
    - Table-driven programming
    - XML configuration
    - DSLs
    - physical separation of layers via DTOs
    - plugins
    - event-driven architecture
    - heavy metaprogramming via attributes & IOC containers
    - mixins via dynamic types
    - making everything possible into state machines

    - Asides to include:
        - chunking theory
        - Conway's Law
        - Miller's Law